{"remainingRequest":"/home/azuma/git/portfolio/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/azuma/git/portfolio/src/components/VueBubblyBg.vue?vue&type=template&id=4a574d2b&scoped=true","dependencies":[{"path":"/home/azuma/git/portfolio/src/components/VueBubblyBg.vue","mtime":1623748497605},{"path":"/home/azuma/git/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/azuma/git/portfolio/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/azuma/git/portfolio/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1616796459000},{"path":"/home/azuma/git/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/azuma/git/portfolio/node_modules/vue-loader-v16/dist/index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGNhbnZhcyA6c3R5bGU9ImJhY2tncm91bmRDb2xvciI+PC9jYW52YXM+Cg=="},{"version":3,"sources":["/home/azuma/git/portfolio/src/components/VueBubblyBg.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/azuma/git/portfolio/src/components/VueBubblyBg.vue","sourceRoot":"","sourcesContent":["<template>\n  <canvas :style=\"backgroundColor\"></canvas>\n</template>\n\n<script>\nexport default {\n  props: {\n    bgColor: String, // canvasの背景色\n    colorString: String, // 色パターン文字列\n    colorNum: [Number, String], // 色hsl 色相値 0〜360\n    circleNum: [Number, String], // 円の数\n    circleSpeed: String, // 移動スピード(veryslow, slow, fast, veryfast)\n    circleSize: String, // 円の大きさ(verysmall, small, big, verybig)\n    flgSizeFix: [Boolean, String], // 固定円サイズ(指定がなければランダム)\n    moveType: String // 移動タイプ(vert horizon)\n  },\n  data() {\n    return {\n      ctx: null,\n      width: 0,\n      height: 0,\n      circleManage: [],\n      drawCount: 0,\n      moveVertical: 1,\n      moveHorizontal: 1,\n      colorList: {\n        red: 0,\n        orange: 25,\n        yellow: 60,\n        yellowgreen: 85,\n        green: 110,\n        greenblue: 165,\n        lightblue: 180,\n        blue: 200,\n        bluepurple: 260,\n        purple: 285,\n        lightpuple: 300,\n        purplered: 315,\n        lightred: 340\n      }\n    }\n  },\n  computed: {\n    backgroundColor() {\n      return `background-color: ${this.bgColor}`\n    }\n  },\n  mounted() {\n    this.settingCanvas()\n    this.initPoint()\n    requestAnimationFrame(this.draw)\n    window.addEventListener('resize', this.settingCanvas)\n  },\n  beforeUnmount: function () {\n    window.removeEventListener('resize', this.settingCanvas)\n  },\n  methods: {\n    /**\n     * canvas設定\n     */\n    settingCanvas() {\n      const parent = this.$el.parentNode\n      this.width = parent.clientWidth\n      this.height = parent.clientHeight\n      this.ctx = this.$el.getContext('2d')\n      this.$el.width = this.width\n      this.$el.height = this.height\n    },\n    /**\n     * 円情報初期設定\n     */\n    initPoint() {\n      this.circleManage = []\n      // 表示数用 乱数取得\n      const maxNum = this.circleNum || 30\n      const minNum = this.circleNum ? this.circleNum / 2 : 10\n      const circleNum = Math.floor(Math.random() * (maxNum - minNum) + minNum)\n      let cnt = 0\n      // 円の移動スピード veryslow, slow, fast, veryfast\n      let speed = 1.0;\n      switch (this.circleSpeed) {\n        case 'veryslow':\n          speed = 0.1;\n          break;\n        case 'slow':\n          speed = 0.5;\n          break;\n        case 'fast':\n          speed = 2.0;\n          break;\n        case 'veryfast':\n          speed = 5.0;\n          break;\n      }\n      // 円の大きさ verysmall, small, big, verybig\n      let sizeRate = 1.0\n      switch (this.circleSize) {\n        case 'verysmall':\n          sizeRate = 0.1;\n          break;\n        case 'small':\n          sizeRate = 0.5;\n          break;\n        case 'big':\n          sizeRate = 2.5;\n          break;\n        case 'verybig':\n          sizeRate = 4.5;\n          break;\n      }\n      // 移動タイプ vert horizon\n      switch (this.moveType) {\n        case 'vert':\n          this.moveHorizontal = 0\n          break;\n        case 'horizon':\n          this.moveVertical = 0\n          break;\n      }\n      // 円サイズベース\n      let baseSize = 50\n      while(cnt < circleNum) {\n        // 輝度\n        const lightness =  Math.floor(Math.random() * (80 - 40) + 50)\n        // 円サイズ固定フラグ\n        if(this.flgSizeFix === false) {\n          baseSize = Math.floor(Math.random() * (50 - 5) + 5)\n        }\n        // それぞれの円の大きさ (最大 - 最小) + 最小\n        this.circleManage.push({\n          x: Math.floor(Math.random() * (this.width - 0) + 0),\n          y: Math.floor(Math.random() * (this.height - 0) + 0),\n          r: baseSize * sizeRate,\n          moveX: Math.random() * (Math.random() < 0.5 ? -1 : 1) * speed * this.moveHorizontal,\n          moveY: Math.random() * (Math.random() < 0.5 ? -1 : 1) * speed * this.moveVertical,\n          color: `hsl(${this.desideColorNum()}, 100%, ${lightness}%)`\n        })\n        cnt++\n      }\n    },\n    /**\n     * 描画\n     */\n    draw() {\n      // リセット\n      this.ctx.clearRect(0, 0, this.width, this.height)\n      for(let i in this.circleManage) {\n        this.calcPoint(this.circleManage[i], i)\n        this.settingCircle(this.circleManage[i])\n      }\n      requestAnimationFrame(this.draw)\n    },\n    /**\n     * 色情報\n     */\n    desideColorNum() {\n      let num = 200\n      if(this.colorList.hasOwnProperty(this.colorString)) {\n        num = this.colorList[this.colorString]\n      } else if(!isNaN(this.colorNum)) {\n        num = this.colorNum\n      }\n      return num\n    },\n    /**\n     * 円移動座標計算\n     * @param arg 円一つ分の情報\n     * @param i 配列キー\n     */\n    calcPoint(arg, i) {\n      arg.x += arg.moveX\n      arg.y += arg.moveY\n      if(arg.x < 0) {\n        arg.x = this.width\n      } else if (arg.x > this.width) {\n        arg.x = 0\n      }\n      if(arg.y < 0) {\n        arg.y = this.height\n      } else if (arg.y > this.height) {\n        arg.y = 0\n      }\n      this.circleManage[i] = arg\n    },\n    /**\n     * 円情報描画設定\n     * @param arg\n     */\n    settingCircle(arg) {\n      this.ctx.beginPath()\n      this.ctx.arc(arg.x, arg.y, arg.r, 0, Math.PI*2, false)\n      this.ctx.strokeStyle = arg.color\n      this.ctx.fillStyle = arg.color\n      this.ctx.fill();\n      this.ctx.closePath()\n      this.ctx.stroke()\n    },\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\ncanvas {\n  width: 100%;\n  height: 100%;\n}\n</style>"]}]}